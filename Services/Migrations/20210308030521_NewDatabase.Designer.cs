// <auto-generated />
using System;
using Bank.Console.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bank.Services.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20210308030521_NewDatabase")]
    partial class NewDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bank.Model.AccountHolder", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<double>("AvailableBalance")
                        .HasColumnType("float");

                    b.Property<string>("BankId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserName", "Password");

                    b.HasIndex("BankId");

                    b.ToTable("AccountHolders");
                });

            modelBuilder.Entity("Bank.Model.Bank", b =>
                {
                    b.Property<string>("BankId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiffBankIMPS")
                        .HasColumnType("int");

                    b.Property<int>("DiffBankRTGS")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SameBankIMPS")
                        .HasColumnType("int");

                    b.Property<int>("SameBankRTGS")
                        .HasColumnType("int");

                    b.HasKey("BankId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Bank.Model.Branch", b =>
                {
                    b.Property<string>("BranchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchId");

                    b.HasIndex("BankId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Bank.Model.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("BankId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Bank.Model.Employee", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BranchId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserName", "Password");

                    b.HasIndex("BankId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Bank.Model.Transaction", b =>
                {
                    b.Property<string>("TransactionID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderPassword")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountHolderUserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReverted")
                        .HasColumnType("bit");

                    b.Property<string>("SourceAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TransactionID");

                    b.HasIndex("AccountHolderUserName", "AccountHolderPassword");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Bank.Model.AccountHolder", b =>
                {
                    b.HasOne("Bank.Model.Bank", null)
                        .WithMany("AccountHolders")
                        .HasForeignKey("BankId");
                });

            modelBuilder.Entity("Bank.Model.Branch", b =>
                {
                    b.HasOne("Bank.Model.Bank", null)
                        .WithMany("Branches")
                        .HasForeignKey("BankId");
                });

            modelBuilder.Entity("Bank.Model.Currency", b =>
                {
                    b.HasOne("Bank.Model.Bank", null)
                        .WithMany("Currency")
                        .HasForeignKey("BankId");
                });

            modelBuilder.Entity("Bank.Model.Employee", b =>
                {
                    b.HasOne("Bank.Model.Bank", null)
                        .WithMany("Employees")
                        .HasForeignKey("BankId");
                });

            modelBuilder.Entity("Bank.Model.Transaction", b =>
                {
                    b.HasOne("Bank.Model.AccountHolder", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AccountHolderUserName", "AccountHolderPassword");
                });

            modelBuilder.Entity("Bank.Model.AccountHolder", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Bank.Model.Bank", b =>
                {
                    b.Navigation("AccountHolders");

                    b.Navigation("Branches");

                    b.Navigation("Currency");

                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
